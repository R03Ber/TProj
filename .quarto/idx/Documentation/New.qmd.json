{"title":"New","markdown":{"yaml":{"title":"New","format":"html"},"headingText":"Overview - Base Functions","containsRefs":false,"markdown":"\n\n\n**CLEARSCREEN** - Clear the screen. (Shorthand: **CS**) -\\> DONE\n\n**HIDETURTLE** - Don't show the turtle cursor. (**HT**) -\\> DONE\n\n**SHOWTURTLE** - Show the turtle cursor. (**ST**) -\\> DONE\n\n**HOME** - Move back to the home position. -\\> DONE\n\n**FORWARD** *steps* - Move forward *steps*. (**FD**) -\\> DONE\n\n**BACK** *steps* - Move back *steps*. (**BK**) -\\> DONE\n\n**LEFT** *degrees* - Turn left this many degrees. Negative degrees work too, they'll turn it right. (**LT**) -\\> DONE\n\n**RIGHT** *degrees* - Turn right this many degrees. (**RT**) -\\> DONE\n\n**SETHEADING** *degrees* - Turn to an absolute heading of *degrees*. (**SETH**) -\\> DONE\n\n**SETPOS** \\[*x y*\\] - Set the position to *x, y* coordinates. These are Cartesian, so 0,0 is the middle of the screen. -\\> DONE\n\n**SETX** *x* - Set the horizontal position to *x*. -\\> DONE\n\n**SETY** *y* - Set the vertical position to *y*. -\\> DONE\n\n## Requirements\n\n### Environment\n\n-   Draw plot\n-   Remember certain plot elements\n-   Redraw plot\n\n### Turtle\n\n-   Write and remember location\n-   Move in any direction\n    -   Angles using the angle-function are revolving (i.e. 362 degrees are the same as 2 degrees)\n-   Move backwards and forwards\n-   Jump to any location\n-   Draw between locations\n\n### Figuring out\n\n-   Write every piece of information about the turtle, location, etc. in a list\n-   Write list in a document\n-   Have the code access the document at the right position for the different functions\n\n# Functions\n\n## List document\n\n```{r}\nstate <- list(\n  x = c(0),\n  y = c(0),\n  angle = c(0)\n)\n```\n\n### Append list elements\n\n```{r}\nstate$x <- append(state$x, c(2, 4, 5, 6))\n\n```\n\n### Read previous state\n\n```{r}\nstate$x[[length(state$x)-1]]\n```\n\n#### Also works for any previous state\n\n```{r}\nstate$x <- append(state$x, c(2, 3, 3, 8))\nstate$y <- append(state$y, c(2,4, 5, 6, 2, 3, 3, 8))\n\nstate$x[[length(state$x)-1*3]]\nstate$x[[length(state$x)-1*2]]\nstate$x[[length(state$x)-1*0]]\n```\n\n### Resulting Functions\n\nAccess current location of turtle:\n\n```{r}\ncurrent_location <- function(){\n  x <- state$x[[length(state$x)]]\n  y <- state$y[[length(state$y)]]\n  return(c(x, y))\n}\ncurrent_location()\n```\n\nAccess previous location of turtle OR any specified previous location (argument is *n* of steps back in location history):\n\n```{r}\nstate\n\nprevious_location <- function(n_back){\n  if(missing(n_back)){\n    x <- state$x[[length(state$x)-1]]\n    y <- state$y[[length(state$y)-1]]\n    return(c( x, y))\n  }\n  else{\n    x <- state$x[[length(state$x)-1*n_back]]\n    y <- state$y[[length(state$y)-1*n_back]]\n    return(c(x, y))\n  }\n}\nprevious_location()\nprevious_location(4)\n```\n\nUpdate current location (can also read a vector of x and y coordinates such as output by *current_function(),* etc.):\n\n```{r}\nSETPOS <- function(x_coords, y_coords){\n  if(missing(y_coords)){\n    state$x <- append(state$x, x_coords[1])\n    state$y <- append(state$y, x_coords[2])\n    return(list(x = state$x, y = state$y))\n  }else{\n    state$x <- append(state$x, x_coords)\n    state$y <- append(state$y, y_coords)\n    return(list(x = state$x, y = state$y))\n  }\n}\nSETPOS(1, 1)\nSETPOS(previous_location())\n\nstate$x <- SETPOS(previous_location())$x\nstate$y <- SETPOS(1, 1)$y\n\nstate\n```\n\nReset position to middle of screen:\n\n```{r}\nHOME <- function(){\n  SETPOS(0, 0)\n}\n\nstate$x <- HOME()$x\nstate$y <- HOME()$y\n\nstate\n```\n\nSet horizontal position to an absolute value of *n* (i.e. jump horizontally):\n\n```{r}\nSETX <- function(x_coord){\n  state$x <- append(state$x, x_coord)\n  state$y <- append(state$y, state$y[[length(state$y)]])\n  return(list(x = state$x, y = state$y))\n}\n\nstate$x <- SETX(-2)$x\nstate$y <- SETX(-2)$y\n\nstate\n```\n\nSet vertical position to an absolute value of *n* (i.e. jump vertically):\n\n```{r}\nSETY <- function(y_coord){\n  state$x <- append(state$x, state$x[[length(state$x)]])\n  state$y <- append(state$y, y_coord)\n  return(list(x = state$x, y = state$y))\n}\n\nstate$x <- SETY(4)$x\nstate$y <- SETY(4)$y\n\nstate\n```\n\nReturn current angle:\n\n```{r}\nHEADING <- function(){\n  return(state$angle[[length(state$angle)]])\n}\n```\n\nChange absolute angle/direction:\n\n```{r}\nSETHEADING <- function(degrees){\n  state$angle <- append(state$angle, degrees%%360)\n  #return(paste(\"Changed angle to\", degrees, \"degrees.\"))\n  return(angle = state$angle)\n}\n\nstate$angle <- SETHEADING(20)\n\nstate$angle\n```\n\n\\*the term *%%360* is not necessary, from a mathematical perspective, because cos(x) and sin(x) agnostic to any number above 360° or below 0° however, it is an easier to read and comprehend absolute output.\n\nTurn right by *n* degrees:\n\n```{r}\nRIGHT <- function(n_degrees_to_turn){\n  state$angle <- append(state$angle, (state$angle[[length(state$angle)]]-n_degrees_to_turn)%%360)\n  return(angle = state$angle)\n}\n\nstate$angle <- RIGHT(30)\n\nstate$angle\n```\n\nTurn left by *n* degrees:\n\n```{r}\nLEFT <- function(n_degrees_to_turn){\n  state$angle <- append(state$angle, (state$angle[[length(state$angle)]]+n_degrees_to_turn)%%360)\n  return(angle = state$angle)\n}\n\nstate$angle <- LEFT(30)\n\nstate$angle\n```\n\nMove forward by *n* steps:\n\n```{r}\nFORWARD <- function(n_steps){\n  if(missing(n_steps)){\n    new_x = state$x[[length(state$x)]]+1*cos(state$angle[[length(state$angle)]]*(pi/180))\n    new_y = state$y[[length(state$y)]]+1*sin(state$angle[[length(state$angle)]]*(pi/180))\n  }else{\n    new_x = state$x[[length(state$x)]]+n_steps*cos(state$angle[[length(state$angle)]]*(pi/180))\n    new_y = state$y[[length(state$y)]]+n_steps*sin(state$angle[[length(state$angle)]]*(pi/180))\n  }\n  SETPOS(new_x, new_y)\n}\n\nFORWARD(2)\n```\n\nMove backwards by *n* steps:\n\n```{r}\nBACK <- function(n_steps){\n  if(missing(n_steps)){\n    new_x = state$x[[length(state$x)]]-1*cos(state$angle[[length(state$angle)]]*(pi/180))\n    new_y = state$y[[length(state$y)]]-1*sin(state$angle[[length(state$angle)]]*(pi/180))\n  }else{\n    new_x = state$x[[length(state$x)]]-n_steps*cos(state$angle[[length(state$angle)]]*(pi/180))\n    new_y = state$y[[length(state$y)]]-n_steps*sin(state$angle[[length(state$angle)]]*(pi/180))\n  }\n  SETPOS(new_x, new_y)\n}\n\nBACK(7)\n```\n\n## Plot\n\n### Draw a blank canvas\n\n```{r}\nCLEARSCREEN <- function(){\n  plot.new()\n  plot.window(xlim = c(-50, 50), ylim = c(-50, 50), pty = \"s\")\n  \n  state$plot_records[[length(state$plot_records)+1]] <- recordPlot()\n}\n\nCLEARSCREEN()\n```\n\n### Draw a directional object\n\nTurtle:\n\n```{r}\n  TURTLE <- function(){\n    if(state$angle[[length(state$angle)]]==90){\n      arrows(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]]-0.02,\n        x1 = state$x[[length(state$x)]],\n        y1 = state$y[[length(state$y)]]+0.02,\n        angle = 65,\n        length = 0.1, lwd = 9, col = \"darkslategrey\", code = 3\n        )\n      arrows(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        x1 = state$x[[length(state$x)]],\n        y1 = state$y[[length(state$y)]]+0.9,\n        length = 0, lwd = 12, col = \"olivedrab4\"\n        )\n      arrows(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]]-1,\n        x1 = state$x[[length(state$x)]],\n        y1 = state$y[[length(state$y)]],\n        length = 0, lwd = 7, col = \"darkslategrey\", code = 1\n        )\n      points(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        pch = 19, cex = 2.5, col = \"darkgreen\"\n        )\n      points(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        pch = 5, cex = 1.75, col = \"black\"\n        )\n      points(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        pch = 10, cex = 2.5, col = \"black\"\n        )\n    }else if(state$angle[[length(state$angle)]]==270){\n      arrows(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]]+0.02,\n        x1 = state$x[[length(state$x)]],\n        y1 = state$y[[length(state$y)]]-0.02,\n        angle = 65,\n        length = 0.1, lwd = 9, col = \"darkslategrey\", code = 3\n        )\n      arrows(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        x1 = state$x[[length(state$x)]],\n        y1 = state$y[[length(state$y)]]-0.9,\n        length = 0, lwd = 12, col = \"olivedrab4\"\n        )\n      arrows(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]]+1,\n        x1 = state$x[[length(state$x)]],\n        y1 = state$y[[length(state$y)]],\n        length = 0, lwd = 7, col = \"darkslategrey\", code = 1\n        )\n      points(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        pch = 19, cex = 2.5, col = \"darkgreen\"\n        )\n      points(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        pch = 5, cex = 1.75, col = \"black\"\n        )\n      points(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        pch = 10, cex = 2.5, col = \"black\"\n        )\n    }else{\n      arrows(state$x[[length(state$x)]]-0.02*cos(state$angle[[length(state$angle)]]*(pi/180)),\n             state$y[[length(state$y)]]-0.02*sin(state$angle[[length(state$angle)]]*(pi/180)),\n             x1 = state$x[[length(state$x)]]+0.02*cos(state$angle[[length(state$angle)]]*(pi/180)),\n             y1 = state$y[[length(state$y)]]+0.02*sin(state$angle[[length(state$angle)]]*(pi/180)),\n             angle = 65,\n           length = 0.1, lwd = 9, col = \"darkslategrey\", code = 3)\n    arrows(state$x[[length(state$x)]],\n           state$y[[length(state$y)]],\n           x1 = state$x[[length(state$x)]]+0.85*cos(state$angle[[length(state$angle)]]*(pi/180)),\n           y1 = state$y[[length(state$y)]]+0.85*sin(state$angle[[length(state$angle)]]*(pi/180)),\n           length = 0, lwd = 12, col = \"olivedrab4\")\n    arrows(state$x[[length(state$x)]]-1*cos(state$angle[[length(state$angle)]]*(pi/180)),\n           state$y[[length(state$y)]]-1*sin(state$angle[[length(state$angle)]]*(pi/180)),\n           x1 = state$x[[length(state$x)]],\n           y1 = state$y[[length(state$y)]],\n           length = 0, lwd = 7, col = \"darkslategrey\", code = 1)\n    points(\n      state$x[[length(state$x)]],\n      state$y[[length(state$y)]],\n      pch = 19, cex = 2.5, col = \"darkgreen\"\n      )\n    points(\n      state$x[[length(state$x)]],\n      state$y[[length(state$y)]],\n      pch = 5, cex = 1.75, col = \"black\"\n      )\n    points(\n      state$x[[length(state$x)]],\n      state$y[[length(state$y)]],\n      pch = 10, cex = 2.5, col = \"black\"\n      )\n  }\n}\n\nplot.new()\nplot.window(xlim = c(-50, 50), ylim = c(-50, 50), pty = \"s\")\n\nTURTLE()\n```\n\nHideturtle / Showturtle\n\n```{r}\nSHOWTURTLE <- function(){\n  state$drawturtle <- 1\n}\n\nHIDETURTLE <- function(){\n  state$drawturtle <- 0\n}\n```\n\n### Trace Movement / Draw\n\n```{r}\nplot.new()\nplot.window(xlim = c(-50, 50), ylim = c(-50, 50), pty = \"s\")\n\nTRACE <- function(){\n  lines(c(state$x[[length(state$x)-1]], state$x[[length(state$x)]]), \n        c(state$y[[length(state$y)-1]], state$y[[length(state$y)]]), lwd = 2)\n}\n\nTRACE()\n\n```\n\n### Redraw plot\n\n```{r}\nPATH_RECALL <- function(){\n  return(state$plot_records[[length(state$plot_records)]])\n}\n\nPATH_RECALL()\n```\n\n# Integration for full functionality\n\n```{r BIOME}\nBIOME <- new.env()\n\nBIOME$state <- list()\nBIOME$savestate <- list()\n```\n\n```{r HELLO}\nHELLO <- function(){\n  state <- BIOME$state\n  \n  state$x <- list(0)\n  state$y <- list(0)\n  state$angle <- list(90)\n  state$drawturtle <- list(1)\n  \n  plot.new()\n  plot.window(xlim = c(-50, 50), ylim = c(-50, 50), pty = \"s\")\n  \n  state$plot_records[[1]] <- recordPlot()\n  \n  state$savemode <- \"OFF\"\n  \n  BIOME$state <- state\n}\n```\n\n```{r REMEMBER}\nREMEMBER <- function(){\n  state <- BIOME$state\n  \n  state$plot_records[[length(state$plot_records)+1]] <- recordPlot()\n  \n  BIOME$state <- state\n}\n```\n\n```{r DEJAVU}\nDEJAVU <- function(){\n  state <- BIOME$state\n  \n  replayPlot(state$plot_records[[length(state$plot_records)]])\n}\n```\n\n```{r SHOWTURTLE}\nSHOWTURTLE <- function(){\n  state <- BIOME$state\n  \n  state$drawturtle <- 1\n  \n  BIOME$state <- state\n  \n  return(\"Turtle is now awake!\")\n}\n```\n\n```{r HIDETURTLE}\nHIDETURTLE <- function(){\n  state <- BIOME$state\n  \n  state$drawturtle <- 0\n  \n  BIOME$state <- state\n  \n  return(\"Turtle is now asleep!\")\n}\n```\n\n```{r TURTLE}\nTURTLE <- function(){\n  state <- BIOME$state\n  \n  if(state$drawturtle == 1){\n    if(state$angle[[length(state$angle)]]==90){\n      arrows(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]]-0.02,\n        x1 = state$x[[length(state$x)]],\n        y1 = state$y[[length(state$y)]]+0.02,\n        angle = 65,\n        length = 0.1, lwd = 9, col = \"darkslategrey\", code = 3\n        )\n      arrows(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        x1 = state$x[[length(state$x)]],\n        y1 = state$y[[length(state$y)]]+0.9,\n        length = 0, lwd = 12, col = \"olivedrab4\"\n        )\n      arrows(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]]-1,\n        x1 = state$x[[length(state$x)]],\n        y1 = state$y[[length(state$y)]],\n        length = 0, lwd = 7, col = \"darkslategrey\", code = 1\n        )\n      points(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        pch = 19, cex = 2.5, col = \"darkgreen\"\n        )\n      points(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        pch = 5, cex = 1.75, col = \"black\"\n        )\n      points(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        pch = 10, cex = 2.5, col = \"black\"\n        )\n    }else if(state$angle[[length(state$angle)]]==270){\n      arrows(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]]+0.02,\n        x1 = state$x[[length(state$x)]],\n        y1 = state$y[[length(state$y)]]-0.02,\n        angle = 65,\n        length = 0.1, lwd = 9, col = \"darkslategrey\", code = 3\n        )\n      arrows(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        x1 = state$x[[length(state$x)]],\n        y1 = state$y[[length(state$y)]]-0.9,\n        length = 0, lwd = 12, col = \"olivedrab4\"\n        )\n      arrows(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]]+1,\n        x1 = state$x[[length(state$x)]],\n        y1 = state$y[[length(state$y)]],\n        length = 0, lwd = 7, col = \"darkslategrey\", code = 1\n        )\n      points(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        pch = 19, cex = 2.5, col = \"darkgreen\"\n        )\n      points(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        pch = 5, cex = 1.75, col = \"black\"\n        )\n      points(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        pch = 10, cex = 2.5, col = \"black\"\n        )\n    }else{\n      arrows(state$x[[length(state$x)]]-0.02*cos(state$angle[[length(state$angle)]]*(pi/180)),\n             state$y[[length(state$y)]]-0.02*sin(state$angle[[length(state$angle)]]*(pi/180)),\n             x1 = state$x[[length(state$x)]]+0.02*cos(state$angle[[length(state$angle)]]*(pi/180)),\n             y1 = state$y[[length(state$y)]]+0.02*sin(state$angle[[length(state$angle)]]*(pi/180)),\n             angle = 65,\n           length = 0.1, lwd = 9, col = \"darkslategrey\", code = 3)\n    arrows(state$x[[length(state$x)]],\n           state$y[[length(state$y)]],\n           x1 = state$x[[length(state$x)]]+0.85*cos(state$angle[[length(state$angle)]]*(pi/180)),\n           y1 = state$y[[length(state$y)]]+0.85*sin(state$angle[[length(state$angle)]]*(pi/180)),\n           length = 0, lwd = 12, col = \"olivedrab4\")\n    arrows(state$x[[length(state$x)]]-1*cos(state$angle[[length(state$angle)]]*(pi/180)),\n           state$y[[length(state$y)]]-1*sin(state$angle[[length(state$angle)]]*(pi/180)),\n           x1 = state$x[[length(state$x)]],\n           y1 = state$y[[length(state$y)]],\n           length = 0, lwd = 7, col = \"darkslategrey\", code = 1)\n    points(\n      state$x[[length(state$x)]],\n      state$y[[length(state$y)]],\n      pch = 19, cex = 2.5, col = \"darkgreen\"\n      )\n    points(\n      state$x[[length(state$x)]],\n      state$y[[length(state$y)]],\n      pch = 5, cex = 1.75, col = \"black\"\n      )\n    points(\n      state$x[[length(state$x)]],\n      state$y[[length(state$y)]],\n      pch = 10, cex = 2.5, col = \"black\"\n      )\n  }}\n}\n```\n\n```{r TRACE}\nTRACE <- function(){\n  state <- BIOME$state\n  \n  lines(c(state$x[[length(state$x)-1]], state$x[[length(state$x)]]), \n        c(state$y[[length(state$y)-1]], state$y[[length(state$y)]]),\n        lwd = 2)\n}\n```\n\n```{r WHERE}\nWHERE <- function(){\n  state <- BIOME$state\n  \n  x <- state$x[[length(state$x)]]\n  y <- state$y[[length(state$y)]]\n  return(c(x, y))\n}\n```\n\n```{r PREVIOUS}\nPREVIOUS <- function(n_back){\n  state <- BIOME$state\n  \n  if(length(state$x)<=1){\n    return(\"The Turtle is still in it's shell\")\n  }\n  else if(missing(n_back)){\n    x <- state$x[[length(state$x)-1]]\n    y <- state$y[[length(state$y)-1]]\n    return(c( x, y))\n  }\n  else{\n    x <- state$x[[length(state$x)-1*n_back]]\n    y <- state$y[[length(state$y)-1*n_back]]\n    return(c(x, y))\n  }\n}\n```\n\n```{r SETPOS}\nSETPOS <- function(x_coords, y_coords){\n  state <- BIOME$state\n  \n  if(missing(y_coords)){\n    state$x <- append(state$x, x_coords[1])\n    state$y <- append(state$y, x_coords[2])\n  }else{\n    state$x <- append(state$x, x_coords)\n    state$y <- append(state$y, y_coords)\n  }\n  \n  BIOME$state <- state\n  \n  DEJAVU()\n  TURTLE()\n  \n  return(list(x = state$x[[length(state$x)]], y = state$y[[length(state$y)]]))\n}\n```\n\n```{r HOME}\nHOME <- function(){\n  state <- BIOME$state\n  \n  state$x[[length(state$x)+1]] <- 0\n  state$y[[length(state$y)+1]] <- 0\n  \n  BIOME$state <- state\n  \n  DEJAVU()\n  TURTLE()\n  \n  return(list(x = state$x[[length(state$x)]], y = state$y[[length(state$y)]]))\n}\n```\n\n```{r SETX}\nSETX <- function(x_coord){\n  state <- BIOME$state\n  \n  state$x <- append(state$x, x_coord)\n  state$y <- append(state$y, state$y[[length(state$y)]])\n  \n  BIOME$state <- state\n  \n  DEJAVU()\n  TURTLE()\n  \n  return(list(x = state$x[[length(state$x)]], y = state$y[[length(state$y)]]))\n}\n```\n\n```{r SETY}\nSETY <- function(y_coord){\n  state <- BIOME$state\n  \n  state$x <- append(state$x, state$x[[length(state$x)]])\n  state$y <- append(state$y, y_coord)\n  \n  BIOME$state <- state\n  \n  DEJAVU()\n  TURTLE()\n  \n  return(list(x = state$x[[length(state$x)]], y = state$y[[length(state$y)]]))\n}\n```\n\n```{r HEADING}\nHEADING <- function(){\n  state <- BIOME$state\n  \n  return(paste(\"Turtle is currently facing\", state$angle[[length(state$angle)]],\n               \"degrees!\"))\n}\n```\n\n```{r SETHEADING}\nSETHEADING <- function(degrees){\n  state <- BIOME$state\n  \n  state$angle <- append(state$angle, degrees%%360)\n  \n  BIOME$state <- state\n  \n  DEJAVU()\n  TURTLE()\n  \n  return(paste(\"Turtle has turned to\", state$angle[[length(state$angle)]], \"degrees!\"))\n}\n```\n\n```{r RIGHT}\nRIGHT <- function(n_degrees_to_turn){\n  state <- BIOME$state\n  \n  state$angle <- append(state$angle,\n                        (state$angle[[length(state$angle)]]\n                         -n_degrees_to_turn)%%360)\n  \n  BIOME$state <- state\n  \n  DEJAVU()\n  TURTLE()\n  \n  return(paste(\"Turtle has turned\", n_degrees_to_turn, \"degrees to the right and is now facing\", state$angle[[length(state$angle)]], \"degrees!\"))\n}\n```\n\n```{r LEFT}\nLEFT <- function(n_degrees_to_turn){\n  state <- BIOME$state\n  \n  state$angle <- append(state$angle,\n                        (state$angle[[length(state$angle)]]\n                         +n_degrees_to_turn)%%360)\n  \n  BIOME$state <- state\n  \n  DEJAVU()\n  TURTLE()\n  \n  return(paste(\"Turtle has turned\", n_degrees_to_turn, \"degrees to the left and is now facing\", state$angle[[length(state$angle)]], \"degrees!\"))\n}\n```\n\n```{r FORWARD}\nFORWARD<- function(n){\n  state <- BIOME$state\n  DEJAVU()\n  RAD <- state$angle[[length(state$angle)]]*(pi/180)\n  \n  if(missing(n)){\n    state$x[[length(state$x)+1]] <- state$x[[length(state$x)]]+cos(RAD)\n    state$y[[length(state$y)+1]] <- state$y[[length(state$y)]]+sin(RAD)\n  }else{\n    state$x[[length(state$x)+1]] <- state$x[[length(state$x)]]+n*cos(RAD)\n    state$y[[length(state$y)+1]] <- state$y[[length(state$y)]]+n*sin(RAD)\n  }\n  BIOME$state <- state\n  TRACE()\n  REMEMBER()\n  TURTLE()\n}\n```\n\n```{r BACK}\nBACK <- function(n){\n  state <- BIOME$state\n  DEJAVU()\n  RAD <- state$angle[[length(state$angle)]]*(pi/180)\n  \n  if(missing(n)){\n    state$x[[length(state$x)+1]] <- state$x[[length(state$x)]]-cos(RAD)\n    state$y[[length(state$y)+1]] <- state$y[[length(state$y)]]-sin(RAD)\n  }else{\n    state$x[[length(state$x)+1]] <- state$x[[length(state$x)]]-n*cos(RAD)\n    state$y[[length(state$y)+1]] <- state$y[[length(state$y)]]-n*sin(RAD)\n  }\n  BIOME$state <- state\n  TRACE()\n  REMEMBER()\n  TURTLE()\n}\n```\n\n```{r CLEARSCREEN}\nCLEARSCREEN <- function(){\n  \n  plot.new()\n  plot.window(xlim = c(-50, 50), ylim = c(-50, 50), pty = \"s\")\n  REMEMBER()\n  \n  state <- BIOME$state\n  state$angle[[length(state$angle)]] <- 90\n  BIOME$state <- state\n  \n  HOME()\n}\n```\n\n## Optimization Goals\n\n-   Only optionally draw the plot every single step\n    -   for example: some switch in TRACE function and TURTLE function - if(memory_saver == 1)if(length(state\\$x)%%20 == 0) {lines()} else {}}\n    -   Adjustable memory_saver function with 3 stages: on, off, and intermittent\n-   Larger plot.window (or adjust step length)\n\n### Optimization\n\nMemorysaver takes ON (requires to manually call TRACE() after movement inputs), LIMIT (only redraws the plot after every 20 movement iterations) and OFF as arguments.\n\n```{r MSAVER}\nMSAVER <- function(MODE){\n  state <- BIOME$state\n  \n  if(MODE == \"ON\"){\n    state$savemode <- \"ON\"\n  }else if(MODE == \"LIMIT\"){\n    state$savemode <- \"LIMIT\"\n  }else{\n    state$savemode <- \"OFF\"\n  }\n  \n  BIOME$state <- state\n}\n```\n\nIn order for MSAVER to work properly it is advisable to use STATERASE() first:\n\n```{r STATERASE}\nSTATERASE <- function(){\n  savestate <- BIOME$savestate\n  \n  state <- BIOME$state\n  \n  savestate[[length(savestate)+1]] <- state\n  \n  BIOME$savestate <- savestate\n  \n  BIOME$state <- list()\n  HELLO()\n  TURTLE()\n}\n```\n\nNow we need to also update the functions, so that drawing plots and the turtle behaves accordingly:\n","srcMarkdownNoYaml":"\n\n# Overview - Base Functions\n\n**CLEARSCREEN** - Clear the screen. (Shorthand: **CS**) -\\> DONE\n\n**HIDETURTLE** - Don't show the turtle cursor. (**HT**) -\\> DONE\n\n**SHOWTURTLE** - Show the turtle cursor. (**ST**) -\\> DONE\n\n**HOME** - Move back to the home position. -\\> DONE\n\n**FORWARD** *steps* - Move forward *steps*. (**FD**) -\\> DONE\n\n**BACK** *steps* - Move back *steps*. (**BK**) -\\> DONE\n\n**LEFT** *degrees* - Turn left this many degrees. Negative degrees work too, they'll turn it right. (**LT**) -\\> DONE\n\n**RIGHT** *degrees* - Turn right this many degrees. (**RT**) -\\> DONE\n\n**SETHEADING** *degrees* - Turn to an absolute heading of *degrees*. (**SETH**) -\\> DONE\n\n**SETPOS** \\[*x y*\\] - Set the position to *x, y* coordinates. These are Cartesian, so 0,0 is the middle of the screen. -\\> DONE\n\n**SETX** *x* - Set the horizontal position to *x*. -\\> DONE\n\n**SETY** *y* - Set the vertical position to *y*. -\\> DONE\n\n## Requirements\n\n### Environment\n\n-   Draw plot\n-   Remember certain plot elements\n-   Redraw plot\n\n### Turtle\n\n-   Write and remember location\n-   Move in any direction\n    -   Angles using the angle-function are revolving (i.e. 362 degrees are the same as 2 degrees)\n-   Move backwards and forwards\n-   Jump to any location\n-   Draw between locations\n\n### Figuring out\n\n-   Write every piece of information about the turtle, location, etc. in a list\n-   Write list in a document\n-   Have the code access the document at the right position for the different functions\n\n# Functions\n\n## List document\n\n```{r}\nstate <- list(\n  x = c(0),\n  y = c(0),\n  angle = c(0)\n)\n```\n\n### Append list elements\n\n```{r}\nstate$x <- append(state$x, c(2, 4, 5, 6))\n\n```\n\n### Read previous state\n\n```{r}\nstate$x[[length(state$x)-1]]\n```\n\n#### Also works for any previous state\n\n```{r}\nstate$x <- append(state$x, c(2, 3, 3, 8))\nstate$y <- append(state$y, c(2,4, 5, 6, 2, 3, 3, 8))\n\nstate$x[[length(state$x)-1*3]]\nstate$x[[length(state$x)-1*2]]\nstate$x[[length(state$x)-1*0]]\n```\n\n### Resulting Functions\n\nAccess current location of turtle:\n\n```{r}\ncurrent_location <- function(){\n  x <- state$x[[length(state$x)]]\n  y <- state$y[[length(state$y)]]\n  return(c(x, y))\n}\ncurrent_location()\n```\n\nAccess previous location of turtle OR any specified previous location (argument is *n* of steps back in location history):\n\n```{r}\nstate\n\nprevious_location <- function(n_back){\n  if(missing(n_back)){\n    x <- state$x[[length(state$x)-1]]\n    y <- state$y[[length(state$y)-1]]\n    return(c( x, y))\n  }\n  else{\n    x <- state$x[[length(state$x)-1*n_back]]\n    y <- state$y[[length(state$y)-1*n_back]]\n    return(c(x, y))\n  }\n}\nprevious_location()\nprevious_location(4)\n```\n\nUpdate current location (can also read a vector of x and y coordinates such as output by *current_function(),* etc.):\n\n```{r}\nSETPOS <- function(x_coords, y_coords){\n  if(missing(y_coords)){\n    state$x <- append(state$x, x_coords[1])\n    state$y <- append(state$y, x_coords[2])\n    return(list(x = state$x, y = state$y))\n  }else{\n    state$x <- append(state$x, x_coords)\n    state$y <- append(state$y, y_coords)\n    return(list(x = state$x, y = state$y))\n  }\n}\nSETPOS(1, 1)\nSETPOS(previous_location())\n\nstate$x <- SETPOS(previous_location())$x\nstate$y <- SETPOS(1, 1)$y\n\nstate\n```\n\nReset position to middle of screen:\n\n```{r}\nHOME <- function(){\n  SETPOS(0, 0)\n}\n\nstate$x <- HOME()$x\nstate$y <- HOME()$y\n\nstate\n```\n\nSet horizontal position to an absolute value of *n* (i.e. jump horizontally):\n\n```{r}\nSETX <- function(x_coord){\n  state$x <- append(state$x, x_coord)\n  state$y <- append(state$y, state$y[[length(state$y)]])\n  return(list(x = state$x, y = state$y))\n}\n\nstate$x <- SETX(-2)$x\nstate$y <- SETX(-2)$y\n\nstate\n```\n\nSet vertical position to an absolute value of *n* (i.e. jump vertically):\n\n```{r}\nSETY <- function(y_coord){\n  state$x <- append(state$x, state$x[[length(state$x)]])\n  state$y <- append(state$y, y_coord)\n  return(list(x = state$x, y = state$y))\n}\n\nstate$x <- SETY(4)$x\nstate$y <- SETY(4)$y\n\nstate\n```\n\nReturn current angle:\n\n```{r}\nHEADING <- function(){\n  return(state$angle[[length(state$angle)]])\n}\n```\n\nChange absolute angle/direction:\n\n```{r}\nSETHEADING <- function(degrees){\n  state$angle <- append(state$angle, degrees%%360)\n  #return(paste(\"Changed angle to\", degrees, \"degrees.\"))\n  return(angle = state$angle)\n}\n\nstate$angle <- SETHEADING(20)\n\nstate$angle\n```\n\n\\*the term *%%360* is not necessary, from a mathematical perspective, because cos(x) and sin(x) agnostic to any number above 360° or below 0° however, it is an easier to read and comprehend absolute output.\n\nTurn right by *n* degrees:\n\n```{r}\nRIGHT <- function(n_degrees_to_turn){\n  state$angle <- append(state$angle, (state$angle[[length(state$angle)]]-n_degrees_to_turn)%%360)\n  return(angle = state$angle)\n}\n\nstate$angle <- RIGHT(30)\n\nstate$angle\n```\n\nTurn left by *n* degrees:\n\n```{r}\nLEFT <- function(n_degrees_to_turn){\n  state$angle <- append(state$angle, (state$angle[[length(state$angle)]]+n_degrees_to_turn)%%360)\n  return(angle = state$angle)\n}\n\nstate$angle <- LEFT(30)\n\nstate$angle\n```\n\nMove forward by *n* steps:\n\n```{r}\nFORWARD <- function(n_steps){\n  if(missing(n_steps)){\n    new_x = state$x[[length(state$x)]]+1*cos(state$angle[[length(state$angle)]]*(pi/180))\n    new_y = state$y[[length(state$y)]]+1*sin(state$angle[[length(state$angle)]]*(pi/180))\n  }else{\n    new_x = state$x[[length(state$x)]]+n_steps*cos(state$angle[[length(state$angle)]]*(pi/180))\n    new_y = state$y[[length(state$y)]]+n_steps*sin(state$angle[[length(state$angle)]]*(pi/180))\n  }\n  SETPOS(new_x, new_y)\n}\n\nFORWARD(2)\n```\n\nMove backwards by *n* steps:\n\n```{r}\nBACK <- function(n_steps){\n  if(missing(n_steps)){\n    new_x = state$x[[length(state$x)]]-1*cos(state$angle[[length(state$angle)]]*(pi/180))\n    new_y = state$y[[length(state$y)]]-1*sin(state$angle[[length(state$angle)]]*(pi/180))\n  }else{\n    new_x = state$x[[length(state$x)]]-n_steps*cos(state$angle[[length(state$angle)]]*(pi/180))\n    new_y = state$y[[length(state$y)]]-n_steps*sin(state$angle[[length(state$angle)]]*(pi/180))\n  }\n  SETPOS(new_x, new_y)\n}\n\nBACK(7)\n```\n\n## Plot\n\n### Draw a blank canvas\n\n```{r}\nCLEARSCREEN <- function(){\n  plot.new()\n  plot.window(xlim = c(-50, 50), ylim = c(-50, 50), pty = \"s\")\n  \n  state$plot_records[[length(state$plot_records)+1]] <- recordPlot()\n}\n\nCLEARSCREEN()\n```\n\n### Draw a directional object\n\nTurtle:\n\n```{r}\n  TURTLE <- function(){\n    if(state$angle[[length(state$angle)]]==90){\n      arrows(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]]-0.02,\n        x1 = state$x[[length(state$x)]],\n        y1 = state$y[[length(state$y)]]+0.02,\n        angle = 65,\n        length = 0.1, lwd = 9, col = \"darkslategrey\", code = 3\n        )\n      arrows(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        x1 = state$x[[length(state$x)]],\n        y1 = state$y[[length(state$y)]]+0.9,\n        length = 0, lwd = 12, col = \"olivedrab4\"\n        )\n      arrows(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]]-1,\n        x1 = state$x[[length(state$x)]],\n        y1 = state$y[[length(state$y)]],\n        length = 0, lwd = 7, col = \"darkslategrey\", code = 1\n        )\n      points(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        pch = 19, cex = 2.5, col = \"darkgreen\"\n        )\n      points(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        pch = 5, cex = 1.75, col = \"black\"\n        )\n      points(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        pch = 10, cex = 2.5, col = \"black\"\n        )\n    }else if(state$angle[[length(state$angle)]]==270){\n      arrows(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]]+0.02,\n        x1 = state$x[[length(state$x)]],\n        y1 = state$y[[length(state$y)]]-0.02,\n        angle = 65,\n        length = 0.1, lwd = 9, col = \"darkslategrey\", code = 3\n        )\n      arrows(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        x1 = state$x[[length(state$x)]],\n        y1 = state$y[[length(state$y)]]-0.9,\n        length = 0, lwd = 12, col = \"olivedrab4\"\n        )\n      arrows(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]]+1,\n        x1 = state$x[[length(state$x)]],\n        y1 = state$y[[length(state$y)]],\n        length = 0, lwd = 7, col = \"darkslategrey\", code = 1\n        )\n      points(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        pch = 19, cex = 2.5, col = \"darkgreen\"\n        )\n      points(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        pch = 5, cex = 1.75, col = \"black\"\n        )\n      points(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        pch = 10, cex = 2.5, col = \"black\"\n        )\n    }else{\n      arrows(state$x[[length(state$x)]]-0.02*cos(state$angle[[length(state$angle)]]*(pi/180)),\n             state$y[[length(state$y)]]-0.02*sin(state$angle[[length(state$angle)]]*(pi/180)),\n             x1 = state$x[[length(state$x)]]+0.02*cos(state$angle[[length(state$angle)]]*(pi/180)),\n             y1 = state$y[[length(state$y)]]+0.02*sin(state$angle[[length(state$angle)]]*(pi/180)),\n             angle = 65,\n           length = 0.1, lwd = 9, col = \"darkslategrey\", code = 3)\n    arrows(state$x[[length(state$x)]],\n           state$y[[length(state$y)]],\n           x1 = state$x[[length(state$x)]]+0.85*cos(state$angle[[length(state$angle)]]*(pi/180)),\n           y1 = state$y[[length(state$y)]]+0.85*sin(state$angle[[length(state$angle)]]*(pi/180)),\n           length = 0, lwd = 12, col = \"olivedrab4\")\n    arrows(state$x[[length(state$x)]]-1*cos(state$angle[[length(state$angle)]]*(pi/180)),\n           state$y[[length(state$y)]]-1*sin(state$angle[[length(state$angle)]]*(pi/180)),\n           x1 = state$x[[length(state$x)]],\n           y1 = state$y[[length(state$y)]],\n           length = 0, lwd = 7, col = \"darkslategrey\", code = 1)\n    points(\n      state$x[[length(state$x)]],\n      state$y[[length(state$y)]],\n      pch = 19, cex = 2.5, col = \"darkgreen\"\n      )\n    points(\n      state$x[[length(state$x)]],\n      state$y[[length(state$y)]],\n      pch = 5, cex = 1.75, col = \"black\"\n      )\n    points(\n      state$x[[length(state$x)]],\n      state$y[[length(state$y)]],\n      pch = 10, cex = 2.5, col = \"black\"\n      )\n  }\n}\n\nplot.new()\nplot.window(xlim = c(-50, 50), ylim = c(-50, 50), pty = \"s\")\n\nTURTLE()\n```\n\nHideturtle / Showturtle\n\n```{r}\nSHOWTURTLE <- function(){\n  state$drawturtle <- 1\n}\n\nHIDETURTLE <- function(){\n  state$drawturtle <- 0\n}\n```\n\n### Trace Movement / Draw\n\n```{r}\nplot.new()\nplot.window(xlim = c(-50, 50), ylim = c(-50, 50), pty = \"s\")\n\nTRACE <- function(){\n  lines(c(state$x[[length(state$x)-1]], state$x[[length(state$x)]]), \n        c(state$y[[length(state$y)-1]], state$y[[length(state$y)]]), lwd = 2)\n}\n\nTRACE()\n\n```\n\n### Redraw plot\n\n```{r}\nPATH_RECALL <- function(){\n  return(state$plot_records[[length(state$plot_records)]])\n}\n\nPATH_RECALL()\n```\n\n# Integration for full functionality\n\n```{r BIOME}\nBIOME <- new.env()\n\nBIOME$state <- list()\nBIOME$savestate <- list()\n```\n\n```{r HELLO}\nHELLO <- function(){\n  state <- BIOME$state\n  \n  state$x <- list(0)\n  state$y <- list(0)\n  state$angle <- list(90)\n  state$drawturtle <- list(1)\n  \n  plot.new()\n  plot.window(xlim = c(-50, 50), ylim = c(-50, 50), pty = \"s\")\n  \n  state$plot_records[[1]] <- recordPlot()\n  \n  state$savemode <- \"OFF\"\n  \n  BIOME$state <- state\n}\n```\n\n```{r REMEMBER}\nREMEMBER <- function(){\n  state <- BIOME$state\n  \n  state$plot_records[[length(state$plot_records)+1]] <- recordPlot()\n  \n  BIOME$state <- state\n}\n```\n\n```{r DEJAVU}\nDEJAVU <- function(){\n  state <- BIOME$state\n  \n  replayPlot(state$plot_records[[length(state$plot_records)]])\n}\n```\n\n```{r SHOWTURTLE}\nSHOWTURTLE <- function(){\n  state <- BIOME$state\n  \n  state$drawturtle <- 1\n  \n  BIOME$state <- state\n  \n  return(\"Turtle is now awake!\")\n}\n```\n\n```{r HIDETURTLE}\nHIDETURTLE <- function(){\n  state <- BIOME$state\n  \n  state$drawturtle <- 0\n  \n  BIOME$state <- state\n  \n  return(\"Turtle is now asleep!\")\n}\n```\n\n```{r TURTLE}\nTURTLE <- function(){\n  state <- BIOME$state\n  \n  if(state$drawturtle == 1){\n    if(state$angle[[length(state$angle)]]==90){\n      arrows(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]]-0.02,\n        x1 = state$x[[length(state$x)]],\n        y1 = state$y[[length(state$y)]]+0.02,\n        angle = 65,\n        length = 0.1, lwd = 9, col = \"darkslategrey\", code = 3\n        )\n      arrows(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        x1 = state$x[[length(state$x)]],\n        y1 = state$y[[length(state$y)]]+0.9,\n        length = 0, lwd = 12, col = \"olivedrab4\"\n        )\n      arrows(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]]-1,\n        x1 = state$x[[length(state$x)]],\n        y1 = state$y[[length(state$y)]],\n        length = 0, lwd = 7, col = \"darkslategrey\", code = 1\n        )\n      points(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        pch = 19, cex = 2.5, col = \"darkgreen\"\n        )\n      points(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        pch = 5, cex = 1.75, col = \"black\"\n        )\n      points(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        pch = 10, cex = 2.5, col = \"black\"\n        )\n    }else if(state$angle[[length(state$angle)]]==270){\n      arrows(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]]+0.02,\n        x1 = state$x[[length(state$x)]],\n        y1 = state$y[[length(state$y)]]-0.02,\n        angle = 65,\n        length = 0.1, lwd = 9, col = \"darkslategrey\", code = 3\n        )\n      arrows(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        x1 = state$x[[length(state$x)]],\n        y1 = state$y[[length(state$y)]]-0.9,\n        length = 0, lwd = 12, col = \"olivedrab4\"\n        )\n      arrows(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]]+1,\n        x1 = state$x[[length(state$x)]],\n        y1 = state$y[[length(state$y)]],\n        length = 0, lwd = 7, col = \"darkslategrey\", code = 1\n        )\n      points(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        pch = 19, cex = 2.5, col = \"darkgreen\"\n        )\n      points(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        pch = 5, cex = 1.75, col = \"black\"\n        )\n      points(\n        state$x[[length(state$x)]],\n        state$y[[length(state$y)]],\n        pch = 10, cex = 2.5, col = \"black\"\n        )\n    }else{\n      arrows(state$x[[length(state$x)]]-0.02*cos(state$angle[[length(state$angle)]]*(pi/180)),\n             state$y[[length(state$y)]]-0.02*sin(state$angle[[length(state$angle)]]*(pi/180)),\n             x1 = state$x[[length(state$x)]]+0.02*cos(state$angle[[length(state$angle)]]*(pi/180)),\n             y1 = state$y[[length(state$y)]]+0.02*sin(state$angle[[length(state$angle)]]*(pi/180)),\n             angle = 65,\n           length = 0.1, lwd = 9, col = \"darkslategrey\", code = 3)\n    arrows(state$x[[length(state$x)]],\n           state$y[[length(state$y)]],\n           x1 = state$x[[length(state$x)]]+0.85*cos(state$angle[[length(state$angle)]]*(pi/180)),\n           y1 = state$y[[length(state$y)]]+0.85*sin(state$angle[[length(state$angle)]]*(pi/180)),\n           length = 0, lwd = 12, col = \"olivedrab4\")\n    arrows(state$x[[length(state$x)]]-1*cos(state$angle[[length(state$angle)]]*(pi/180)),\n           state$y[[length(state$y)]]-1*sin(state$angle[[length(state$angle)]]*(pi/180)),\n           x1 = state$x[[length(state$x)]],\n           y1 = state$y[[length(state$y)]],\n           length = 0, lwd = 7, col = \"darkslategrey\", code = 1)\n    points(\n      state$x[[length(state$x)]],\n      state$y[[length(state$y)]],\n      pch = 19, cex = 2.5, col = \"darkgreen\"\n      )\n    points(\n      state$x[[length(state$x)]],\n      state$y[[length(state$y)]],\n      pch = 5, cex = 1.75, col = \"black\"\n      )\n    points(\n      state$x[[length(state$x)]],\n      state$y[[length(state$y)]],\n      pch = 10, cex = 2.5, col = \"black\"\n      )\n  }}\n}\n```\n\n```{r TRACE}\nTRACE <- function(){\n  state <- BIOME$state\n  \n  lines(c(state$x[[length(state$x)-1]], state$x[[length(state$x)]]), \n        c(state$y[[length(state$y)-1]], state$y[[length(state$y)]]),\n        lwd = 2)\n}\n```\n\n```{r WHERE}\nWHERE <- function(){\n  state <- BIOME$state\n  \n  x <- state$x[[length(state$x)]]\n  y <- state$y[[length(state$y)]]\n  return(c(x, y))\n}\n```\n\n```{r PREVIOUS}\nPREVIOUS <- function(n_back){\n  state <- BIOME$state\n  \n  if(length(state$x)<=1){\n    return(\"The Turtle is still in it's shell\")\n  }\n  else if(missing(n_back)){\n    x <- state$x[[length(state$x)-1]]\n    y <- state$y[[length(state$y)-1]]\n    return(c( x, y))\n  }\n  else{\n    x <- state$x[[length(state$x)-1*n_back]]\n    y <- state$y[[length(state$y)-1*n_back]]\n    return(c(x, y))\n  }\n}\n```\n\n```{r SETPOS}\nSETPOS <- function(x_coords, y_coords){\n  state <- BIOME$state\n  \n  if(missing(y_coords)){\n    state$x <- append(state$x, x_coords[1])\n    state$y <- append(state$y, x_coords[2])\n  }else{\n    state$x <- append(state$x, x_coords)\n    state$y <- append(state$y, y_coords)\n  }\n  \n  BIOME$state <- state\n  \n  DEJAVU()\n  TURTLE()\n  \n  return(list(x = state$x[[length(state$x)]], y = state$y[[length(state$y)]]))\n}\n```\n\n```{r HOME}\nHOME <- function(){\n  state <- BIOME$state\n  \n  state$x[[length(state$x)+1]] <- 0\n  state$y[[length(state$y)+1]] <- 0\n  \n  BIOME$state <- state\n  \n  DEJAVU()\n  TURTLE()\n  \n  return(list(x = state$x[[length(state$x)]], y = state$y[[length(state$y)]]))\n}\n```\n\n```{r SETX}\nSETX <- function(x_coord){\n  state <- BIOME$state\n  \n  state$x <- append(state$x, x_coord)\n  state$y <- append(state$y, state$y[[length(state$y)]])\n  \n  BIOME$state <- state\n  \n  DEJAVU()\n  TURTLE()\n  \n  return(list(x = state$x[[length(state$x)]], y = state$y[[length(state$y)]]))\n}\n```\n\n```{r SETY}\nSETY <- function(y_coord){\n  state <- BIOME$state\n  \n  state$x <- append(state$x, state$x[[length(state$x)]])\n  state$y <- append(state$y, y_coord)\n  \n  BIOME$state <- state\n  \n  DEJAVU()\n  TURTLE()\n  \n  return(list(x = state$x[[length(state$x)]], y = state$y[[length(state$y)]]))\n}\n```\n\n```{r HEADING}\nHEADING <- function(){\n  state <- BIOME$state\n  \n  return(paste(\"Turtle is currently facing\", state$angle[[length(state$angle)]],\n               \"degrees!\"))\n}\n```\n\n```{r SETHEADING}\nSETHEADING <- function(degrees){\n  state <- BIOME$state\n  \n  state$angle <- append(state$angle, degrees%%360)\n  \n  BIOME$state <- state\n  \n  DEJAVU()\n  TURTLE()\n  \n  return(paste(\"Turtle has turned to\", state$angle[[length(state$angle)]], \"degrees!\"))\n}\n```\n\n```{r RIGHT}\nRIGHT <- function(n_degrees_to_turn){\n  state <- BIOME$state\n  \n  state$angle <- append(state$angle,\n                        (state$angle[[length(state$angle)]]\n                         -n_degrees_to_turn)%%360)\n  \n  BIOME$state <- state\n  \n  DEJAVU()\n  TURTLE()\n  \n  return(paste(\"Turtle has turned\", n_degrees_to_turn, \"degrees to the right and is now facing\", state$angle[[length(state$angle)]], \"degrees!\"))\n}\n```\n\n```{r LEFT}\nLEFT <- function(n_degrees_to_turn){\n  state <- BIOME$state\n  \n  state$angle <- append(state$angle,\n                        (state$angle[[length(state$angle)]]\n                         +n_degrees_to_turn)%%360)\n  \n  BIOME$state <- state\n  \n  DEJAVU()\n  TURTLE()\n  \n  return(paste(\"Turtle has turned\", n_degrees_to_turn, \"degrees to the left and is now facing\", state$angle[[length(state$angle)]], \"degrees!\"))\n}\n```\n\n```{r FORWARD}\nFORWARD<- function(n){\n  state <- BIOME$state\n  DEJAVU()\n  RAD <- state$angle[[length(state$angle)]]*(pi/180)\n  \n  if(missing(n)){\n    state$x[[length(state$x)+1]] <- state$x[[length(state$x)]]+cos(RAD)\n    state$y[[length(state$y)+1]] <- state$y[[length(state$y)]]+sin(RAD)\n  }else{\n    state$x[[length(state$x)+1]] <- state$x[[length(state$x)]]+n*cos(RAD)\n    state$y[[length(state$y)+1]] <- state$y[[length(state$y)]]+n*sin(RAD)\n  }\n  BIOME$state <- state\n  TRACE()\n  REMEMBER()\n  TURTLE()\n}\n```\n\n```{r BACK}\nBACK <- function(n){\n  state <- BIOME$state\n  DEJAVU()\n  RAD <- state$angle[[length(state$angle)]]*(pi/180)\n  \n  if(missing(n)){\n    state$x[[length(state$x)+1]] <- state$x[[length(state$x)]]-cos(RAD)\n    state$y[[length(state$y)+1]] <- state$y[[length(state$y)]]-sin(RAD)\n  }else{\n    state$x[[length(state$x)+1]] <- state$x[[length(state$x)]]-n*cos(RAD)\n    state$y[[length(state$y)+1]] <- state$y[[length(state$y)]]-n*sin(RAD)\n  }\n  BIOME$state <- state\n  TRACE()\n  REMEMBER()\n  TURTLE()\n}\n```\n\n```{r CLEARSCREEN}\nCLEARSCREEN <- function(){\n  \n  plot.new()\n  plot.window(xlim = c(-50, 50), ylim = c(-50, 50), pty = \"s\")\n  REMEMBER()\n  \n  state <- BIOME$state\n  state$angle[[length(state$angle)]] <- 90\n  BIOME$state <- state\n  \n  HOME()\n}\n```\n\n## Optimization Goals\n\n-   Only optionally draw the plot every single step\n    -   for example: some switch in TRACE function and TURTLE function - if(memory_saver == 1)if(length(state\\$x)%%20 == 0) {lines()} else {}}\n    -   Adjustable memory_saver function with 3 stages: on, off, and intermittent\n-   Larger plot.window (or adjust step length)\n\n### Optimization\n\nMemorysaver takes ON (requires to manually call TRACE() after movement inputs), LIMIT (only redraws the plot after every 20 movement iterations) and OFF as arguments.\n\n```{r MSAVER}\nMSAVER <- function(MODE){\n  state <- BIOME$state\n  \n  if(MODE == \"ON\"){\n    state$savemode <- \"ON\"\n  }else if(MODE == \"LIMIT\"){\n    state$savemode <- \"LIMIT\"\n  }else{\n    state$savemode <- \"OFF\"\n  }\n  \n  BIOME$state <- state\n}\n```\n\nIn order for MSAVER to work properly it is advisable to use STATERASE() first:\n\n```{r STATERASE}\nSTATERASE <- function(){\n  savestate <- BIOME$savestate\n  \n  state <- BIOME$state\n  \n  savestate[[length(savestate)+1]] <- state\n  \n  BIOME$savestate <- savestate\n  \n  BIOME$state <- list()\n  HELLO()\n  TURTLE()\n}\n```\n\nNow we need to also update the functions, so that drawing plots and the turtle behaves accordingly:\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"wrap","code-link":true,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../styles.css"],"output-file":"New.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"visual","theme":"cosmo","code-copy":true,"page-layout":"full","title":"New"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}